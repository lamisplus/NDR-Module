[{"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\index.js":"1","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\App.js":"2","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Errors.js":"6","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Dashboard.js":"7","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\hts.js":"8","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\generate.js":"9","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\NdrConfiguration.js":"10","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\download.js":"11","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Biometrics.js":"12","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Redact.js":"13","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\PageUtils.js":"14","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\api.js":"15","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\NdrConfigurationSetup.js":"16"},{"size":753,"mtime":1700056595645,"results":"17","hashOfConfig":"18"},{"size":950,"mtime":1700056901784,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1700056607019,"results":"20","hashOfConfig":"18"},{"size":9235,"mtime":1700056597864,"results":"21","hashOfConfig":"18"},{"size":3056,"mtime":1700056597869,"results":"22","hashOfConfig":"18"},{"size":3902,"mtime":1700056904347,"results":"23","hashOfConfig":"18"},{"size":6896,"mtime":1702674714795,"results":"24","hashOfConfig":"18"},{"size":7773,"mtime":1700056904363,"results":"25","hashOfConfig":"18"},{"size":7801,"mtime":1700056904359,"results":"26","hashOfConfig":"18"},{"size":9745,"mtime":1708690849082,"results":"27","hashOfConfig":"18"},{"size":11110,"mtime":1702674714798,"results":"28","hashOfConfig":"18"},{"size":5059,"mtime":1700056904337,"results":"29","hashOfConfig":"18"},{"size":7810,"mtime":1702674714797,"results":"30","hashOfConfig":"18"},{"size":275,"mtime":1700056606969,"results":"31","hashOfConfig":"18"},{"size":431,"mtime":1708679431736,"results":"32","hashOfConfig":"18"},{"size":7828,"mtime":1708678996229,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"l8j9e6",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58","usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"63","usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"66","usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"69","usedDeprecatedRules":"37"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"37"},"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\index.js",["77"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\"; \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["78","79"],"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\App.js",["80"],"import React from \"react\";\r\nimport { MemoryRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./main/webapp/vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./../src/main/webapp/css/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport HomePage from \"./main/webapp/jsx/components/ndr/Dashboard\";\r\nimport Errors from \"./main/webapp/jsx/components/ndr/Errors\";\r\n//import HomePage from './main/webapp/jsx/ndr/Dashboard'\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <ToastContainer />\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <HomePage />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Errors.js",["81","82","83","84","85"],"import React, { forwardRef, useState } from \"react\";\r\nimport { Row, Col, CardBody, Card } from \"reactstrap\";\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport moment from \"moment\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst ErrorPage = (props) => {\r\n  const [loading, setLoading] = useState(\"\");\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <MaterialTable\r\n            icons={tableIcons}\r\n            title=\"NDR XML errors generated\"\r\n            columns={[\r\n              { title: \"Hospital No\", field: \"hospital_no\", filtering: false },\r\n              {\r\n                title: \"Patient Id\",\r\n                field: \"patient_id\",\r\n                filtering: false,\r\n              },\r\n              {\r\n                title: \"Error Message\",\r\n                field: \"error_message\",\r\n                filtering: false,\r\n              },\r\n            ]}\r\n            isLoading={loading}\r\n            data={props.errors.map((row) => ({\r\n              hospital_no: row.hospitalNumber,\r\n              patient_id: row.patientUuid,\r\n              error_message: row.errorMessage,\r\n            }))}\r\n            options={{\r\n              pageSizeOptions: [10, 50, 100, 150, 500],\r\n              headerStyle: {\r\n                backgroundColor: \"#014d88\",\r\n                color: \"#fff\",\r\n                margin: \"auto\",\r\n              },\r\n              filtering: true,\r\n              searchFieldStyle: {\r\n                width: \"300%\",\r\n                margingLeft: \"250px\",\r\n              },\r\n              exportButton: false,\r\n              searchFieldAlignment: \"left\",\r\n              pageSize: 10,\r\n            }}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPage;\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Dashboard.js",["86"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { MdDashboard, MdContacts } from \"react-icons/md\";\r\nimport ErrorIcon from \"@mui/icons-material/Error\";\r\nimport GenerateNdr from \"./generate\";\r\nimport HTS from \"./hts\";\r\nimport DownloadNdr from \"./download\";\r\nimport Biometrics from \"./Biometrics\";\r\nimport ErrorPage from \"./Errors\";\r\nimport NdrConfiguration from \"./NdrConfiguration\";\r\nimport Redact from \"./Redact\";\r\nimport { getQueryParams } from \"./../PageUtils\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-force-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-force-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={5}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-force-tab-${index}`,\r\n    \"aria-controls\": `scrollable-force-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root2: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    margin: theme.spacing(7),\r\n    bullet: {\r\n      display: \"inline-block\",\r\n      margin: \"0 2px\",\r\n      transform: \"scale(0.8)\",\r\n    },\r\n    title: {\r\n      fontSize: 12,\r\n    },\r\n    pos: {\r\n      fontSize: 11,\r\n    },\r\n    cardContent: {\r\n      padding: 2,\r\n    },\r\n    cardroot: {\r\n      margin: theme.spacing(1),\r\n      height: 250 + \"px !important\",\r\n    },\r\n  },\r\n  alertmsge: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  rootaccordia: {\r\n    width: \"100%\",\r\n  },\r\n  accordiaheading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  allergiesroot: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n  },\r\n\r\n  checkboxroot: {\r\n    display: \"flex\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n  },\r\n\r\n  formroot: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n  },\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"33.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n  inforoot: {\r\n    width: \"95%\",\r\n    margin: 20,\r\n    backgroundColor: \"#eee\",\r\n  },\r\n}));\r\n\r\nconst HomePage = (props) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n  const urlIndex = getQueryParams(\"tab\", props.location);\r\n  const [errors, setErrors] = useState([]);\r\n  //const urlTabs = urlIndex !== null ? urlIndex : props.location ;\r\n  //\r\n  useEffect(() => {\r\n    //using the value to control the tabs\r\n  }, [value]);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>NDR</h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <br />\r\n\r\n      <AppBar position=\"static\" style={{ backgroundColor: \"#fff\" }}>\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"primary\"\r\n          aria-label=\"scrollable force tabs example\"\r\n        >\r\n          <Tab\r\n            className={classes.title}\r\n            label=\"Treatment XML\"\r\n            icon={<MdDashboard />}\r\n            {...a11yProps(0)}\r\n          />\r\n\r\n          <Tab\r\n            className={classes.title}\r\n            label=\"HTS XML\"\r\n            icon={<MdContacts />}\r\n            {...a11yProps(1)}\r\n          />\r\n\r\n          <Tab\r\n            className={classes.title}\r\n            label=\"Biometrics Recapture XML\"\r\n            icon={<MdContacts />}\r\n            {...a11yProps(2)}\r\n          />\r\n          <Tab\r\n            className={classes.title}\r\n            label=\"Download Files\"\r\n            icon={<MdContacts />}\r\n            {...a11yProps(3)}\r\n          />\r\n          <Tab\r\n            className={classes.title}\r\n            label=\"NDR File Errors\"\r\n            icon={<ErrorIcon />}\r\n            {...a11yProps(4)}\r\n          />\r\n          <Tab\r\n            className={classes.title}\r\n            label=\"NDR COnfiguration\"\r\n            icon={<MdContacts />}\r\n            {...a11yProps(5)}\r\n          />\r\n          <Tab\r\n            className={classes.title}\r\n            label=\"NDR Redacted\"\r\n            icon={<MdContacts />}\r\n            {...a11yProps(6)}\r\n          />\r\n        </Tabs>\r\n        <div></div>\r\n      </AppBar>\r\n\r\n      <TabPanel value={value} setValue={setValue} index={0}>\r\n        <GenerateNdr value={value} setValue={setValue} />\r\n      </TabPanel>\r\n      <TabPanel value={value} setValue={setValue} index={1}>\r\n        <HTS value={value} setValue={setValue} />\r\n      </TabPanel>\r\n      <TabPanel value={value} setValue={setValue} index={2}>\r\n        <Biometrics value={value} setValue={setValue} />\r\n      </TabPanel>\r\n      <TabPanel value={value} setValue={setValue} index={3}>\r\n        <DownloadNdr value={value} setValue={setValue} setErrors={setErrors} />\r\n      </TabPanel>\r\n      <TabPanel value={value} setValue={setValue} index={4}>\r\n        <ErrorPage value={value} setValue={setValue} errors={errors} />\r\n      </TabPanel>\r\n      <TabPanel value={value} setValue={setValue} index={5}>\r\n        <NdrConfiguration value={value} setValue={setValue} />\r\n      </TabPanel>\r\n      <TabPanel value={value} setValue={setValue} index={6}>\r\n        <Redact value={value} setValue={setValue} />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\hts.js",["87","88","89","90"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport axios from \"axios\";\r\nimport * as api from \"./../../../api\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { CardBody, Card } from \"reactstrap\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { GiFiles } from \"react-icons/gi\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { Modal, ModalBody } from \"reactstrap\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Hts(props) {\r\n  //const [loading, stillLoading] = useState(true)\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [facilities, setFacilities] = useState([]);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [facilitiesApi, setfacilitiesApi] = useState({ facilities: [] });\r\n  const [status, setStatus] = useState(false);\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  useEffect(() => {\r\n    fetchMe();\r\n  }, []);\r\n\r\n  ///GET LIST OF FACILITIES\r\n  async function fetchMe() {\r\n    axios\r\n      .get(`${api.url}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setUser(response.data);\r\n        setFacilities(response.data.applicationUserOrganisationUnits);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  //GET LIST OF NDR GENERATED\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setStatus(!status);\r\n  };\r\n  const generateAction = () => {\r\n    setProcessing(true);\r\n    setModal(true);\r\n    let FacilityIDArray = \"\";\r\n    //LOOPING THROUGH THE FACILITIES OBJECT ARRAY TO FORM THE NEW OBJECT\r\n    checked.forEach(function (value) {\r\n      const id = value.organisationUnitId;\r\n      const facilityparam = \"facilityIds=\" + id;\r\n      FacilityIDArray = facilityparam;\r\n      //FacilityIDArray.push(id);\r\n    });\r\n    //console.log(FacilityIDArray)\r\n    facilitiesApi[\"facilities\"] = FacilityIDArray;\r\n    //SENDING A POST REQUEST\r\n    axios\r\n      .get(`${api.url}ndr/hts?${FacilityIDArray}&isInitial=${status}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        window.setTimeout(() => {\r\n          toast.success(\" Generating HTS Successful!\");\r\n          setModal(false);\r\n          props.setValue(3);\r\n        }, 5000);\r\n\r\n        //props.history.push(\"/generate\", { state: 'download'});\r\n      })\r\n      .catch((error) => {\r\n        setModal(false);\r\n        setProcessing(false); // set the generate button true\r\n        toast.error(\" Something went wrong! Please contact administrator.\");\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <Card>\r\n        <CardBody>\r\n          {checked.length >= 1 ? (\r\n            <>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className=\" float-right mr-1\"\r\n                size=\"large\"\r\n                hidden={processing}\r\n                onClick={() => generateAction()}\r\n              >\r\n                {<GiFiles />} &nbsp;&nbsp;\r\n                <span style={{ textTransform: \"capitalize\" }}>\r\n                  {\" \"}\r\n                  Generate Messages\r\n                </span>\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className=\" float-right mr-1\"\r\n                size=\"large\"\r\n                disabled=\"true\"\r\n              >\r\n                {<GiFiles />} &nbsp;&nbsp;\r\n                <span style={{ textTransform: \"capitalize\" }}>\r\n                  {\" \"}\r\n                  Generate HTS XML{\" \"}\r\n                </span>\r\n              </Button>\r\n            </>\r\n          )}\r\n\r\n          <>\r\n            <br /> <br />\r\n            <Alert severity=\"info\">\r\n              <AlertTitle>Info</AlertTitle>\r\n              Please check the Facilities you want\r\n            </Alert>\r\n            <br />\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"status\"\r\n                checked={status === false}\r\n                onChange={handleChange}\r\n              />\r\n              <b> Updated</b>\r\n            </label>\r\n            {\"   \"}\r\n            {\"   \"}\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"status\"\r\n                checked={status === true}\r\n                onChange={handleChange}\r\n              />\r\n              <b> Initial</b>\r\n            </label>\r\n            <br />\r\n            <List dense className={classes.root}>\r\n              <br />\r\n\r\n              {facilities.map((value) => {\r\n                //console.log(value)\r\n                const labelId = `checkbox-list-secondary-label-${value.id}`;\r\n                return (\r\n                  <ListItem key={value.id} button>\r\n                    <ListItemAvatar>\r\n                      <AccountBalanceIcon />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      id={labelId}\r\n                      primary={`${value.organisationUnitName}`}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Checkbox\r\n                        edge=\"end\"\r\n                        onChange={handleToggle(value)}\r\n                        checked={checked.indexOf(value) !== -1}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n        backdrop={false}\r\n        fade={true}\r\n        style={{ marginTop: \"250px\" }}\r\n        size=\"lg\"\r\n      >\r\n        <ModalBody>\r\n          <h2>Generating NDR File. Please wait...</h2>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\generate.js",["91","92","93","94"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport axios from \"axios\";\r\nimport * as api from \"./../../../api\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { CardBody, Card } from \"reactstrap\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { GiFiles } from \"react-icons/gi\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { Modal, ModalBody } from \"reactstrap\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function GenerateNdr(props) {\r\n  //const [loading, stillLoading] = useState(true)\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [facilities, setFacilities] = useState([]);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [facilitiesApi, setfacilitiesApi] = useState({ facilities: [] });\r\n  const [status, setStatus] = useState(false);\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  useEffect(() => {\r\n    fetchMe();\r\n  }, []);\r\n\r\n  ///GET LIST OF FACILITIES\r\n  async function fetchMe() {\r\n    axios\r\n      .get(`${api.url}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setUser(response.data);\r\n        setFacilities(response.data.applicationUserOrganisationUnits);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  //GET LIST OF NDR GENERATED\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setStatus(!status);\r\n  };\r\n  const generateAction = () => {\r\n    setProcessing(true);\r\n    setModal(true);\r\n    let FacilityIDArray = \"\";\r\n    //LOOPING THROUGH THE FACILITIES OBJECT ARRAY TO FORM THE NEW OBJECT\r\n    checked.forEach(function (value) {\r\n      const id = value.organisationUnitId;\r\n      const facilityparam = \"facilityIds=\" + id;\r\n      FacilityIDArray = facilityparam;\r\n      //FacilityIDArray.push(id);\r\n    });\r\n    //console.log(FacilityIDArray)\r\n    facilitiesApi[\"facilities\"] = FacilityIDArray;\r\n    //SENDING A POST REQUEST\r\n    axios\r\n      .get(\r\n        `${api.url}ndr/optimization?${FacilityIDArray}&isInitial=${status}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        window.setTimeout(() => {\r\n          toast.success(\" Generating NDR Successful!\");\r\n          setModal(false);\r\n          props.setValue(3);\r\n        }, 5000);\r\n\r\n        //props.history.push(\"/generate\", { state: 'download'});\r\n      })\r\n      .catch((error) => {\r\n        setModal(false);\r\n        setProcessing(false); // set the generate button true\r\n        toast.error(\" Something went wrong! Please contact administrator.\");\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <Card>\r\n        <CardBody>\r\n          {checked.length >= 1 ? (\r\n            <>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className=\" float-right mr-1\"\r\n                size=\"large\"\r\n                hidden={processing}\r\n                onClick={() => generateAction()}\r\n              >\r\n                {<GiFiles />} &nbsp;&nbsp;\r\n                <span style={{ textTransform: \"capitalize\" }}>\r\n                  {\" \"}\r\n                  Generate Messages\r\n                </span>\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className=\" float-right mr-1\"\r\n                size=\"large\"\r\n                disabled=\"true\"\r\n              >\r\n                {<GiFiles />} &nbsp;&nbsp;\r\n                <span style={{ textTransform: \"capitalize\" }}>\r\n                  {\" \"}\r\n                  Generate Messages{\" \"}\r\n                </span>\r\n              </Button>\r\n            </>\r\n          )}\r\n\r\n          <>\r\n            <br /> <br />\r\n            <Alert severity=\"info\">\r\n              <AlertTitle>Info</AlertTitle>\r\n              Please check the Facilities you want\r\n            </Alert>\r\n            <br />\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"status\"\r\n                checked={status === false}\r\n                onChange={handleChange}\r\n              />\r\n              <b> Updated</b>\r\n            </label>\r\n            {\"   \"}\r\n            {\"   \"}\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"status\"\r\n                checked={status === true}\r\n                onChange={handleChange}\r\n              />\r\n              <b> Initial</b>\r\n            </label>\r\n            <br />\r\n            <List dense className={classes.root}>\r\n              <br />\r\n\r\n              {facilities.map((value) => {\r\n                //console.log(value)\r\n                const labelId = `checkbox-list-secondary-label-${value.id}`;\r\n                return (\r\n                  <ListItem key={value.id} button>\r\n                    <ListItemAvatar>\r\n                      <AccountBalanceIcon />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      id={labelId}\r\n                      primary={`${value.organisationUnitName}`}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Checkbox\r\n                        edge=\"end\"\r\n                        onChange={handleToggle(value)}\r\n                        checked={checked.indexOf(value) !== -1}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n        backdrop={false}\r\n        fade={true}\r\n        style={{ marginTop: \"250px\" }}\r\n        size=\"lg\"\r\n      >\r\n        <ModalBody>\r\n          <h2>Generating NDR File. Please wait...</h2>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\NdrConfiguration.js",["95","96","97","98","99"],"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\download.js",["100","101","102","103","104","105","106"],"import React, { forwardRef, useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as api from \"./../../../api\";\r\nimport axios from \"axios\";\r\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MaterialTable from \"material-table\";\r\nimport CloudUpload from \"@material-ui/icons/CloudUpload\";\r\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\r\nimport ErrorIcon from \"@mui/icons-material/Error\";\r\nimport { FiUploadCloud } from \"react-icons/fi\";\r\nimport FileSaver from \"file-saver\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Dropdown, Button as Buuton2, Menu, Icon } from \"semantic-ui-react\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport moment from \"moment\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function DownloadNdr(props) {\r\n  const classes = useStyles();\r\n  const [generatedNdrListed, setGeneratedNdrList] = useState([]);\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  useEffect(() => {\r\n    generatedNdrList();\r\n  }, []);\r\n\r\n  //Load NDR WEB in the modal\\\r\n  const loadNdrWeb = () => {\r\n    toggle();\r\n  };\r\n\r\n  ///GET LIST OF FACILITIES\r\n  async function generatedNdrList() {\r\n    axios\r\n      .get(`${api.url}ndr/files`, {\r\n        headers: { Authorization: `Bearer ${api.token}` },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setGeneratedNdrList(response.data);\r\n        //console.log(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  const gotoErrorTable = (id) => {\r\n    axios\r\n      .get(`${api.url}ndr/file/error/${id}`, {\r\n        headers: { Authorization: `Bearer ${api.token}` },\r\n      })\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        props.setErrors(response.data);\r\n        //console.log(response.data);\r\n      })\r\n      .catch((error) => {});\r\n    props.setValue(4);\r\n  };\r\n\r\n  const downloadFile = (fileName) => {\r\n    if (fileName.includes('redacted')) {\r\n        axios\r\n              .get(`${api.url}ndr/download_redacted/${fileName}`, {\r\n                headers: { Authorization: `Bearer ${api.token}` },\r\n                responseType: \"blob\",\r\n              })\r\n              .then((response) => {\r\n                const responseData = response.data;\r\n                let blob = new Blob([responseData], {\r\n                  type: \"application/octet-stream\",\r\n                });\r\n                FileSaver.saveAs(blob, `${fileName}.zip`);\r\n              })\r\n              .catch((error) => {});\r\n    }else {\r\n        axios\r\n              .get(`${api.url}ndr/download/${fileName}`, {\r\n                headers: { Authorization: `Bearer ${api.token}` },\r\n                responseType: \"blob\",\r\n              })\r\n              .then((response) => {\r\n                const responseData = response.data;\r\n                let blob = new Blob([responseData], {\r\n                  type: \"application/octet-stream\",\r\n                });\r\n                FileSaver.saveAs(blob, `${fileName}.zip`);\r\n              })\r\n              .catch((error) => {});\r\n    }\r\n\r\n  };\r\n  const generateAction = (ndrFileId) => {\r\n    setModal(true);\r\n    //const fileID ={id: ndrFileId }\r\n    //SENDING A POST REQUEST\r\n    axios\r\n      .get(`${api.url}ndr-emr/ndr-auto-pusher?id=${ndrFileId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        window.setTimeout(() => {\r\n          toast.success(\" Uploading To NDR Successful!\");\r\n          setModal(false);\r\n          generatedNdrList();\r\n        }, 5000);\r\n\r\n        //props.history.push(\"/generate\", { state: 'download'});\r\n      })\r\n      .catch((error) => {\r\n        setModal(false);\r\n        //toast.error(\" Something went wrong!\");\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const varient = (value) => {\r\n    console.log(value);\r\n    if (value <= 20) {\r\n      return \"danger\";\r\n    } else if (value > 20 && value <= 69) {\r\n      return \"warning\";\r\n    } else if (value >= 70 && value <= 99) {\r\n      return \"info\";\r\n    } else if (value === 100) {\r\n      return \"success\";\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-right\"\r\n        startIcon={<FiUploadCloud size=\"10\" />}\r\n        style={{ backgroundColor: \"#014d88\" }}\r\n        href=\"https://ndr.phis3project.org.ng/Identity/Account/Login?ReturnUrl=%2F\"\r\n        //onClick={loadNdrWeb}\r\n        target=\"_blank\"\r\n      >\r\n        <span> NDR Portal</span>\r\n      </Button>\r\n\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"List of Files Generated\"\r\n        columns={[\r\n          { title: \"Facility Name\", field: \"name\", filtering: false },\r\n          {\r\n            title: \"Number of Files Generated\",\r\n            field: \"files\",\r\n            filtering: false,\r\n          },\r\n          { title: \"File Name\", field: \"fileName\", filtering: false },\r\n          {\r\n            title: \"Date Last Generated\",\r\n            field: \"date\",\r\n            type: \"date\",\r\n            filtering: false,\r\n          },\r\n          {\r\n            title: \"NDR Upload Status\",\r\n            field: \"ndrStatus\",\r\n            type: \"date\",\r\n            filtering: false,\r\n          },\r\n\r\n          {\r\n            title: \"Action\",\r\n            field: \"actions\",\r\n            filtering: false,\r\n          },\r\n        ]}\r\n        isLoading={loading}\r\n        data={generatedNdrListed.map((row) => ({\r\n          name: row.facility,\r\n          files: row.files,\r\n          fileName: row.fileName,\r\n          date: moment(row.lastModified).format(\"LLLL\"),\r\n          ndrStatus: (\r\n            <ProgressBar\r\n              now={row.percentagePushed}\r\n              variant={varient(row.percentagePushed)}\r\n              label={`${row.percentagePushed}%`}\r\n            />\r\n          ),\r\n          actions: (\r\n            <div>\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item>\r\n                  <Buuton2\r\n                    style={{ backgroundColor: \"rgb(153,46,98)\" }}\r\n                    primary\r\n                  >\r\n                    <Dropdown item text=\"Action\">\r\n                      <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                        <Dropdown.Item\r\n                          onClick={() => downloadFile(row.fileName)}\r\n                        >\r\n                          <CloudDownloadIcon color=\"primary\" /> Download File\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => gotoErrorTable(row.id)}>\r\n                          <ErrorIcon color=\"error\" />\r\n                          Error File\r\n                        </Dropdown.Item>\r\n                        {!row.completelyPushed && (\r\n                          <Dropdown.Item onClick={() => generateAction(row.id)}>\r\n                            <CloudUpload color=\"primary\" /> Upload To NDR\r\n                          </Dropdown.Item>\r\n                        )}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Buuton2>\r\n                </Menu.Item>\r\n              </Menu.Menu>\r\n            </div>\r\n          ),\r\n        }))}\r\n        options={{\r\n          pageSizeOptions: [5, 10, 50, 100, 150, 500],\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n            margin: \"auto\",\r\n          },\r\n          filtering: true,\r\n          searchFieldStyle: {\r\n            width: \"300%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n        }}\r\n      />\r\n\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n        backdrop={false}\r\n        fade={true}\r\n        style={{ marginTop: \"250px\" }}\r\n        size=\"lg\"\r\n      >\r\n        <ModalBody>\r\n          <h1>Uploading File To NDR. Please wait...</h1>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Biometrics.js",["107","108","109","110","111"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, CardBody, Card } from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport * as api from \"./../../../api\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst Biometrics = (props) => {\r\n  const [facilities, setFacilities] = useState([]);\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [modal, setModal] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [facilitiesApi, setfacilitiesApi] = useState({ facilities: [] });\r\n\r\n  async function fetchMe() {\r\n    axios\r\n      .get(`${api.url}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //setUser(response.data);\r\n        setFacilities(response.data.applicationUserOrganisationUnits);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMe();\r\n  }, []);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const generateBiometrics = () => {\r\n    setProcessing(true);\r\n    setModal(true);\r\n    let FacilityIDArray = \"\";\r\n\r\n    checked.forEach(function (value) {\r\n      const id = value.organisationUnitId;\r\n      const facilityparam = \"facilityIds=\" + id;\r\n      FacilityIDArray = facilityparam;\r\n      //FacilityIDArray.push(id);\r\n    });\r\n\r\n    console.log(FacilityIDArray);\r\n\r\n    facilitiesApi[\"facilities\"] = FacilityIDArray;\r\n\r\n    axios\r\n      .get(`${api.url}ndr/recapture/generate?${FacilityIDArray}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        window.setTimeout(() => {\r\n          toast.success(\" Generating Biometrics XML Successful!\");\r\n          setModal(false);\r\n          props.setValue(3);\r\n        }, 5000);\r\n\r\n        //props.history.push(\"/generate\", { state: 'download'});\r\n      })\r\n      .catch((error) => {\r\n        setModal(false);\r\n        setProcessing(false); // set the generate button true\r\n        toast.error(\" Something went wrong! Please contact administrator.\");\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          className=\" float-right mr-1\"\r\n          size=\"large\"\r\n          onClick={() => generateBiometrics()}\r\n          //disabled=\"true\"\r\n        >\r\n          <span style={{ textTransform: \"capitalize\" }}>\r\n            {\" \"}\r\n            Generate Biometrics XML{\" \"}\r\n          </span>\r\n        </Button>\r\n        <br />\r\n        {processing ? <CircularProgress /> : \"\"}\r\n        {facilities.map((value) => {\r\n          //console.log(value)\r\n          const labelId = `checkbox-list-secondary-label-${value.id}`;\r\n          return (\r\n            <Row>\r\n              <Col>\r\n                <List key={value.id}>\r\n                  <ListItem key={value.id}>\r\n                    <ListItemAvatar>\r\n                      <AccountBalanceIcon />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      id={labelId}\r\n                      primary={`${value.organisationUnitName}`}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Checkbox\r\n                        edge=\"end\"\r\n                        onChange={handleToggle(value)}\r\n                        checked={checked.indexOf(value) !== -1}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                </List>\r\n              </Col>\r\n              <Col></Col>\r\n              <Col></Col>\r\n              <Col></Col>\r\n            </Row>\r\n          );\r\n        })}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Biometrics;\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\Redact.js",["112","113","114","115"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport axios from \"axios\";\r\nimport * as api from \"./../../../api\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { CardBody, Card } from \"reactstrap\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { GiFiles } from \"react-icons/gi\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { Modal, ModalBody } from \"reactstrap\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Redact(props) {\r\n  //const [loading, stillLoading] = useState(true)\r\n  //let history = useHistory();\r\n  const classes = useStyles();\r\n  const [facilities, setFacilities] = useState([]);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [facilitiesApi, setfacilitiesApi] = useState({ facilities: [] });\r\n  const [status, setStatus] = useState(false);\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  useEffect(() => {\r\n    fetchMe();\r\n  }, []);\r\n\r\n  ///GET LIST OF FACILITIES\r\n  async function fetchMe() {\r\n    axios\r\n      .get(`${api.url}account`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setUser(response.data);\r\n        setFacilities(response.data.applicationUserOrganisationUnits);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  //GET LIST OF NDR GENERATED\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setStatus(!status);\r\n  };\r\n  const generateAction = () => {\r\n    setProcessing(true);\r\n    setModal(true);\r\n    let FacilityIDArray = \"\";\r\n    //LOOPING THROUGH THE FACILITIES OBJECT ARRAY TO FORM THE NEW OBJECT\r\n    checked.forEach(function (value) {\r\n      const id = value.organisationUnitId;\r\n      const facilityparam = \"facilityIds=\" + id;\r\n      FacilityIDArray = facilityparam;\r\n      //FacilityIDArray.push(id);\r\n    });\r\n    //console.log(FacilityIDArray)\r\n    facilitiesApi[\"facilities\"] = FacilityIDArray;\r\n    //SENDING A POST REQUEST\r\n    axios\r\n      .get(\r\n        `${api.url}ndr/redacted?${FacilityIDArray}&isInitial=${status}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        window.setTimeout(() => {\r\n          toast.success(\" Generating Redacted files Successfully!\");\r\n          setModal(false);\r\n          props.setValue(3);\r\n        }, 5000);\r\n\r\n        //props.history.push(\"/generate\", { state: 'download'});\r\n      })\r\n      .catch((error) => {\r\n        setModal(false);\r\n        setProcessing(false); // set the generate button true\r\n        toast.error(\" Something went wrong! Please contact administrator.\");\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <Card>\r\n        <CardBody>\r\n          {checked.length >= 1 ? (\r\n            <>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className=\" float-right mr-1\"\r\n                size=\"large\"\r\n                hidden={processing}\r\n                onClick={() => generateAction()}\r\n              >\r\n                {<GiFiles />} &nbsp;&nbsp;\r\n                <span style={{ textTransform: \"capitalize\" }}>\r\n                  {\" \"}\r\n                  Generate Messages\r\n                </span>\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className=\" float-right mr-1\"\r\n                size=\"large\"\r\n                disabled=\"true\"\r\n              >\r\n                {<GiFiles />} &nbsp;&nbsp;\r\n                <span style={{ textTransform: \"capitalize\" }}>\r\n                  {\" \"}\r\n                  Generate Messages{\" \"}\r\n                </span>\r\n              </Button>\r\n            </>\r\n          )}\r\n\r\n          <>\r\n            <br /> <br />\r\n            <Alert severity=\"info\">\r\n              <AlertTitle>Info</AlertTitle>\r\n              Please check the Facilities you want\r\n            </Alert>\r\n            <br />\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"status\"\r\n                checked={status === false}\r\n                onChange={handleChange}\r\n              />\r\n              <b> Updated</b>\r\n            </label>\r\n            {\"   \"}\r\n            {\"   \"}\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"status\"\r\n                checked={status === true}\r\n                onChange={handleChange}\r\n              />\r\n              <b> Initial</b>\r\n            </label>\r\n            <br />\r\n            <List dense className={classes.root}>\r\n              <br />\r\n\r\n              {facilities.map((value) => {\r\n                //console.log(value)\r\n                const labelId = `checkbox-list-secondary-label-${value.id}`;\r\n                return (\r\n                  <ListItem key={value.id} button>\r\n                    <ListItemAvatar>\r\n                      <AccountBalanceIcon />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      id={labelId}\r\n                      primary={`${value.organisationUnitName}`}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                      <Checkbox\r\n                        edge=\"end\"\r\n                        onChange={handleToggle(value)}\r\n                        checked={checked.indexOf(value) !== -1}\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                    </ListItemSecondaryAction>\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n        backdrop={false}\r\n        fade={true}\r\n        style={{ marginTop: \"250px\" }}\r\n        size=\"lg\"\r\n      >\r\n        <ModalBody>\r\n          <h2>Generating Redacted File. Please wait...</h2>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\PageUtils.js",[],"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\api.js",[],"C:\\LAMISPLUS\\PUBLIC\\NDR-Module\\src\\main\\webapp\\jsx\\components\\ndr\\NdrConfigurationSetup.js",["116","117","118","119"],"import React, {useState, useEffect} from 'react';\r\nimport { Modal, ModalHeader, ModalBody,Form,FormFeedback,\r\nRow,Col, Card,CardBody, FormGroup, Input, Label} from 'reactstrap';\r\nimport Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { token as token,  url as baseUrl } from \"./../../../api\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\n\r\nconst DatabaseSyn = (props) => {\r\n    const classes = useStyles()\r\n    const defaultValues = { baseUrl:\"\", email: \"\", password: \"\"  }\r\n    //console.log(props)\r\n    const [patDetails, setPatDetails] = useState(defaultValues);\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    \r\n    const handleInputChange = e => {\r\n      setPatDetails ({...patDetails,  [e.target.name]: e.target.value});\r\n    }\r\n    /*****  Validation */\r\n    const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.email = patDetails.email\r\n        ? \"\"\r\n        : \"Username is required\";\r\n        temp.password = patDetails.password\r\n        ? \"\"\r\n        : \"Password is required\";\r\n        temp.baseUrl = patDetails.baseUrl\r\n            ? \"\"\r\n            : \"URL is required\";\r\n\r\n        setErrors({\r\n            ...temp,\r\n        });\r\n        return Object.values(temp).every((x) => x === \"\");\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n            if (validate()) {      \r\n                    setSaving(true);\r\n                    axios.post(`${baseUrl}ndr-emr/auto-push-configuration`,patDetails,\r\n                     { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                    \r\n                    ).then(response => {\r\n                            setSaving(false);\r\n                            props.NdrSetup()\r\n                            toast.success(\"NDR Setup Successful\");\r\n                            props.toggleModal()\r\n\r\n                    }).catch(error => {\r\n                            setSaving(false);\r\n                            if(error.response && error.response.data){\r\n                                let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                                \r\n                                    toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                                \r\n                            }\r\n                            else{\r\n                                toast.error(\"Something went wrong. Please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }\r\n                        \r\n                        });\r\n            }\r\n        }\r\n\r\n      \r\n  return (      \r\n      <div >\r\n         \r\n              <Modal isOpen={props.showModal} toggle={props.toggleModal} className={props.className} size=\"lg\" backdrop={false} backdrop=\"static\">\r\n              <Form >\r\n             <ModalHeader toggle={props.toggleModal}>NDR Setup</ModalHeader>\r\n                <ModalBody>\r\n                    \r\n                    <Card >\r\n                        <CardBody>\r\n                            <Row >\r\n                                <Col md={12}>\r\n                                    <FormGroup>\r\n                                        <Label >URL </Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"baseUrl\"\r\n                                            id=\"baseUrl\"\r\n                                            value={patDetails.baseUrl}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                        />\r\n                                        {errors.baseUrl !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.baseUrl}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={12}>\r\n                                <FormGroup>\r\n                                <Label >Username </Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"email\"\r\n                                            id=\"email\"\r\n                                            value={patDetails.email}\r\n                                            onChange={handleInputChange}\r\n                                            required\r\n                                            />\r\n                                        {errors.email !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.email}</span>\r\n                                        ) : \"\" }\r\n                                </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md={12}>\r\n                            <FormGroup>\r\n                            <Label >Password </Label>\r\n                                    <Input\r\n                                        type=\"password\"\r\n                                        name=\"password\"\r\n                                        id=\"password\" \r\n                                        value={patDetails.password}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        />\r\n                                    {errors.password !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.password}</span>\r\n                                    ) : \"\" }\r\n                            </FormGroup>\r\n                            </Col>                    \r\n                            </Row>\r\n                            {saving ? <Spinner /> : \"\"}\r\n                            <br/>              \r\n                            <Button\r\n                                type='submit'\r\n                                variant='contained'\r\n                                color='primary'\r\n                                \r\n                                //startIcon={<SettingsBackupRestoreIcon />}\r\n                                onClick={handleSubmit}\r\n                                \r\n                            >   \r\n                                <span style={{ textTransform: \"capitalize \" }}>Connect & Save</span>  \r\n                            </Button>\r\n                        </CardBody>\r\n                        </Card> \r\n                    </ModalBody>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DatabaseSyn;\r\n",{"ruleId":"120","severity":1,"message":"121","line":4,"column":41,"nodeType":"122","messageId":"123","endLine":4,"endColumn":47},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"120","severity":1,"message":"128","line":10,"column":8,"nodeType":"122","messageId":"123","endLine":10,"endColumn":14},{"ruleId":"120","severity":1,"message":"129","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":13},{"ruleId":"120","severity":1,"message":"130","line":2,"column":15,"nodeType":"122","messageId":"123","endLine":2,"endColumn":18},{"ruleId":"120","severity":1,"message":"131","line":19,"column":8,"nodeType":"122","messageId":"123","endLine":19,"endColumn":14},{"ruleId":"120","severity":1,"message":"132","line":20,"column":8,"nodeType":"122","messageId":"123","endLine":20,"endColumn":14},{"ruleId":"120","severity":1,"message":"133","line":47,"column":19,"nodeType":"122","messageId":"123","endLine":47,"endColumn":29},{"ruleId":"120","severity":1,"message":"134","line":154,"column":9,"nodeType":"122","messageId":"123","endLine":154,"endColumn":17},{"ruleId":"135","severity":1,"message":"136","line":11,"column":10,"nodeType":"137","messageId":"138","endLine":11,"endColumn":24,"fix":"139"},{"ruleId":"120","severity":1,"message":"140","line":11,"column":33,"nodeType":"122","messageId":"123","endLine":11,"endColumn":40},{"ruleId":"120","severity":1,"message":"141","line":41,"column":25,"nodeType":"122","messageId":"123","endLine":41,"endColumn":41},{"ruleId":"120","severity":1,"message":"142","line":44,"column":10,"nodeType":"122","messageId":"123","endLine":44,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":11,"column":10,"nodeType":"137","messageId":"138","endLine":11,"endColumn":24,"fix":"143"},{"ruleId":"120","severity":1,"message":"140","line":11,"column":33,"nodeType":"122","messageId":"123","endLine":11,"endColumn":40},{"ruleId":"120","severity":1,"message":"141","line":41,"column":25,"nodeType":"122","messageId":"123","endLine":41,"endColumn":41},{"ruleId":"120","severity":1,"message":"142","line":44,"column":10,"nodeType":"122","messageId":"123","endLine":44,"endColumn":14},{"ruleId":"120","severity":1,"message":"144","line":4,"column":9,"nodeType":"122","messageId":"123","endLine":4,"endColumn":14},{"ruleId":"120","severity":1,"message":"145","line":9,"column":44,"nodeType":"122","messageId":"123","endLine":9,"endColumn":48},{"ruleId":"135","severity":1,"message":"136","line":10,"column":10,"nodeType":"137","messageId":"138","endLine":10,"endColumn":24,"fix":"146"},{"ruleId":"120","severity":1,"message":"147","line":55,"column":12,"nodeType":"122","messageId":"123","endLine":55,"endColumn":23},{"ruleId":"120","severity":1,"message":"148","line":103,"column":12,"nodeType":"122","messageId":"123","endLine":103,"endColumn":26},{"ruleId":"120","severity":1,"message":"149","line":5,"column":28,"nodeType":"122","messageId":"123","endLine":5,"endColumn":39},{"ruleId":"120","severity":1,"message":"150","line":6,"column":10,"nodeType":"122","messageId":"123","endLine":6,"endColumn":14},{"ruleId":"120","severity":1,"message":"145","line":14,"column":45,"nodeType":"122","messageId":"123","endLine":14,"endColumn":49},{"ruleId":"135","severity":1,"message":"136","line":15,"column":10,"nodeType":"137","messageId":"138","endLine":15,"endColumn":24,"fix":"151"},{"ruleId":"120","severity":1,"message":"152","line":73,"column":9,"nodeType":"122","messageId":"123","endLine":73,"endColumn":16},{"ruleId":"120","severity":1,"message":"133","line":75,"column":19,"nodeType":"122","messageId":"123","endLine":75,"endColumn":29},{"ruleId":"120","severity":1,"message":"153","line":84,"column":9,"nodeType":"122","messageId":"123","endLine":84,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":6,"column":10,"nodeType":"137","messageId":"138","endLine":6,"endColumn":24,"fix":"154"},{"ruleId":"120","severity":1,"message":"140","line":6,"column":33,"nodeType":"122","messageId":"123","endLine":6,"endColumn":40},{"ruleId":"120","severity":1,"message":"155","line":14,"column":10,"nodeType":"122","messageId":"123","endLine":14,"endColumn":24},{"ruleId":"120","severity":1,"message":"156","line":20,"column":10,"nodeType":"122","messageId":"123","endLine":20,"endColumn":15},{"ruleId":"120","severity":1,"message":"141","line":22,"column":25,"nodeType":"122","messageId":"123","endLine":22,"endColumn":41},{"ruleId":"135","severity":1,"message":"136","line":11,"column":10,"nodeType":"137","messageId":"138","endLine":11,"endColumn":24,"fix":"157"},{"ruleId":"120","severity":1,"message":"140","line":11,"column":33,"nodeType":"122","messageId":"123","endLine":11,"endColumn":40},{"ruleId":"120","severity":1,"message":"141","line":41,"column":25,"nodeType":"122","messageId":"123","endLine":41,"endColumn":41},{"ruleId":"120","severity":1,"message":"142","line":44,"column":10,"nodeType":"122","messageId":"123","endLine":44,"endColumn":14},{"ruleId":"120","severity":1,"message":"158","line":1,"column":26,"nodeType":"122","messageId":"123","endLine":1,"endColumn":35},{"ruleId":"120","severity":1,"message":"159","line":2,"column":45,"nodeType":"122","messageId":"123","endLine":2,"endColumn":57},{"ruleId":"135","severity":1,"message":"136","line":11,"column":10,"nodeType":"137","messageId":"138","endLine":11,"endColumn":24,"fix":"160"},{"ruleId":"161","severity":1,"message":"162","line":122,"column":129,"nodeType":"163","messageId":"164","endLine":122,"endColumn":146},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["165"],"no-negated-in-lhs",["166"],"'Errors' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'moment' is defined but never used.","'setLoading' is assigned a value but never used.","'urlIndex' is assigned a value but never used.","no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"167","text":"168"},"'baseUrl' is defined but never used.","'setfacilitiesApi' is assigned a value but never used.","'user' is assigned a value but never used.",{"range":"169","text":"168"},"'Modal' is defined but never used.","'Icon' is defined but never used.",{"range":"170","text":"168"},"'setUpDetail' is assigned a value but never used.","'generateAction' is assigned a value but never used.","'ModalHeader' is defined but never used.","'Link' is defined but never used.",{"range":"171","text":"168"},"'classes' is assigned a value but never used.","'loadNdrWeb' is assigned a value but never used.",{"range":"172","text":"168"},"'ToastContainer' is defined but never used.","'modal' is assigned a value but never used.",{"range":"173","text":"168"},"'useEffect' is defined but never used.","'FormFeedback' is defined but never used.",{"range":"174","text":"168"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation",[540,554],"token",[540,554],[439,453],[732,746],[234,248],[540,554],[450,464]]